
LedCube5x5x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001b08  08001b08  00002b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b2c  08001b2c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b2c  08001b2c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b2c  08001b2c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b2c  08001b2c  00002b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b30  08001b30  00002b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001b34  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  08001b40  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08001b40  00003228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002df3  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f05  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00006d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002e5  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159ac  00000000  00000000  0000741d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e64  00000000  00000000  0001cdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bde6  00000000  00000000  00021c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009da13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e28  00000000  00000000  0009da58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0009e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001af0 	.word	0x08001af0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001af0 	.word	0x08001af0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	@ 0x58
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fdbd 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9c5 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9ff 	bl	800055c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_GPIO_WritePin(Led_BL_GPIO_Port, Led_BL_Pin, 1);
 800015e:	2201      	movs	r2, #1
 8000160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000164:	4882      	ldr	r0, [pc, #520]	@ (8000370 <main+0x224>)
 8000166:	f001 f8a1 	bl	80012ac <HAL_GPIO_WritePin>
	  /* code cho 3 trang thai cua ledcube*/
	  /* moi~ trang thai duoc dat trong if
	   * xac' dinh trang thai bang bien' dem' N
	   */
	  /*~~bat dau hieu ung 1~~bat dau hieu ung 1~~bat dau hieu ung 1~~bat dau hieu ung 1~~bat dau hieu ung 1~~*/
if(N == 0 || N == 4)
 800016a:	4b82      	ldr	r3, [pc, #520]	@ (8000374 <main+0x228>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d003      	beq.n	800017a <main+0x2e>
 8000172:	4b80      	ldr	r3, [pc, #512]	@ (8000374 <main+0x228>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b04      	cmp	r3, #4
 8000178:	d173      	bne.n	8000262 <main+0x116>
{
	N++;
 800017a:	4b7e      	ldr	r3, [pc, #504]	@ (8000374 <main+0x228>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	4a7c      	ldr	r2, [pc, #496]	@ (8000374 <main+0x228>)
 8000182:	6013      	str	r3, [r2, #0]
	for (int z = 0; z < 5; ++z) {
 8000184:	2300      	movs	r3, #0
 8000186:	657b      	str	r3, [r7, #84]	@ 0x54
 8000188:	e025      	b.n	80001d6 <main+0x8a>
		for (int x = 0; x < 5; ++x) {
 800018a:	2300      	movs	r3, #0
 800018c:	653b      	str	r3, [r7, #80]	@ 0x50
 800018e:	e01c      	b.n	80001ca <main+0x7e>
			for (int y = 0; y < 5; ++y) {
 8000190:	2300      	movs	r3, #0
 8000192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000194:	e013      	b.n	80001be <main+0x72>
				mangba[x][y][z] = 0;
 8000196:	4878      	ldr	r0, [pc, #480]	@ (8000378 <main+0x22c>)
 8000198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800019a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800019c:	461a      	mov	r2, r3
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	441a      	add	r2, r3
 80001a2:	460b      	mov	r3, r1
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	440b      	add	r3, r1
 80001a8:	0099      	lsls	r1, r3, #2
 80001aa:	440b      	add	r3, r1
 80001ac:	441a      	add	r2, r3
 80001ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80001b0:	4413      	add	r3, r2
 80001b2:	2200      	movs	r2, #0
 80001b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (int y = 0; y < 5; ++y) {
 80001b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80001ba:	3301      	adds	r3, #1
 80001bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80001be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80001c0:	2b04      	cmp	r3, #4
 80001c2:	dde8      	ble.n	8000196 <main+0x4a>
		for (int x = 0; x < 5; ++x) {
 80001c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80001c6:	3301      	adds	r3, #1
 80001c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80001ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80001cc:	2b04      	cmp	r3, #4
 80001ce:	dddf      	ble.n	8000190 <main+0x44>
	for (int z = 0; z < 5; ++z) {
 80001d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80001d2:	3301      	adds	r3, #1
 80001d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80001d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80001d8:	2b04      	cmp	r3, #4
 80001da:	ddd6      	ble.n	800018a <main+0x3e>
			}
		}
	}/* reset gia tri trong mang? ve' 0 */
	for (int z = 0; z < 5; ++z) {
 80001dc:	2300      	movs	r3, #0
 80001de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80001e0:	e031      	b.n	8000246 <main+0xfa>
		for (int x = 0; x < 5; ++x) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80001e6:	e028      	b.n	800023a <main+0xee>
			for (int y = 0; y < 5; ++y) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80001ec:	e01c      	b.n	8000228 <main+0xdc>
				if(x != 2 && y !=2)
 80001ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d013      	beq.n	800021c <main+0xd0>
 80001f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	d010      	beq.n	800021c <main+0xd0>
				{
				mangba[x][y][z] = 1;
 80001fa:	485f      	ldr	r0, [pc, #380]	@ (8000378 <main+0x22c>)
 80001fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000200:	461a      	mov	r2, r3
 8000202:	0092      	lsls	r2, r2, #2
 8000204:	441a      	add	r2, r3
 8000206:	460b      	mov	r3, r1
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	440b      	add	r3, r1
 800020c:	0099      	lsls	r1, r3, #2
 800020e:	440b      	add	r3, r1
 8000210:	441a      	add	r2, r3
 8000212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000214:	4413      	add	r3, r2
 8000216:	2201      	movs	r2, #1
 8000218:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				}
				y++;
 800021c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800021e:	3301      	adds	r3, #1
 8000220:	643b      	str	r3, [r7, #64]	@ 0x40
			for (int y = 0; y < 5; ++y) {
 8000222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000224:	3301      	adds	r3, #1
 8000226:	643b      	str	r3, [r7, #64]	@ 0x40
 8000228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800022a:	2b04      	cmp	r3, #4
 800022c:	dddf      	ble.n	80001ee <main+0xa2>
			}
			x++;
 800022e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000230:	3301      	adds	r3, #1
 8000232:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int x = 0; x < 5; ++x) {
 8000234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000236:	3301      	adds	r3, #1
 8000238:	647b      	str	r3, [r7, #68]	@ 0x44
 800023a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800023c:	2b04      	cmp	r3, #4
 800023e:	ddd3      	ble.n	80001e8 <main+0x9c>
	for (int z = 0; z < 5; ++z) {
 8000240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000242:	3301      	adds	r3, #1
 8000244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000248:	2b04      	cmp	r3, #4
 800024a:	ddca      	ble.n	80001e2 <main+0x96>
		}
	}/* nap gia tri vao mang?*/
	hienthi(mangba, 1);/* chuong trinh con dua gia tri trong mang? ra led*/
 800024c:	2101      	movs	r1, #1
 800024e:	484a      	ldr	r0, [pc, #296]	@ (8000378 <main+0x22c>)
 8000250:	f000 f9f6 	bl	8000640 <hienthi>
	if(N == 5)
 8000254:	4b47      	ldr	r3, [pc, #284]	@ (8000374 <main+0x228>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b05      	cmp	r3, #5
 800025a:	d102      	bne.n	8000262 <main+0x116>
	{
		N = 1;
 800025c:	4b45      	ldr	r3, [pc, #276]	@ (8000374 <main+0x228>)
 800025e:	2201      	movs	r2, #1
 8000260:	601a      	str	r2, [r3, #0]
	}
}
if(N == 1 || N == 3)
 8000262:	4b44      	ldr	r3, [pc, #272]	@ (8000374 <main+0x228>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d003      	beq.n	8000272 <main+0x126>
 800026a:	4b42      	ldr	r3, [pc, #264]	@ (8000374 <main+0x228>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b03      	cmp	r3, #3
 8000270:	d166      	bne.n	8000340 <main+0x1f4>
{
	N++;
 8000272:	4b40      	ldr	r3, [pc, #256]	@ (8000374 <main+0x228>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	4a3e      	ldr	r2, [pc, #248]	@ (8000374 <main+0x228>)
 800027a:	6013      	str	r3, [r2, #0]
	for (int z = 0; z < 5; ++z) {
 800027c:	2300      	movs	r3, #0
 800027e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000280:	e025      	b.n	80002ce <main+0x182>
		for (int x = 0; x < 5; ++x) {
 8000282:	2300      	movs	r3, #0
 8000284:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000286:	e01c      	b.n	80002c2 <main+0x176>
			for (int y = 0; y < 5; ++y) {
 8000288:	2300      	movs	r3, #0
 800028a:	637b      	str	r3, [r7, #52]	@ 0x34
 800028c:	e013      	b.n	80002b6 <main+0x16a>
				mangba[x][y][z] = 0;
 800028e:	483a      	ldr	r0, [pc, #232]	@ (8000378 <main+0x22c>)
 8000290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000292:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000294:	461a      	mov	r2, r3
 8000296:	0092      	lsls	r2, r2, #2
 8000298:	441a      	add	r2, r3
 800029a:	460b      	mov	r3, r1
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	440b      	add	r3, r1
 80002a0:	0099      	lsls	r1, r3, #2
 80002a2:	440b      	add	r3, r1
 80002a4:	441a      	add	r2, r3
 80002a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002a8:	4413      	add	r3, r2
 80002aa:	2200      	movs	r2, #0
 80002ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (int y = 0; y < 5; ++y) {
 80002b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80002b2:	3301      	adds	r3, #1
 80002b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80002b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	dde8      	ble.n	800028e <main+0x142>
		for (int x = 0; x < 5; ++x) {
 80002bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002be:	3301      	adds	r3, #1
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80002c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	dddf      	ble.n	8000288 <main+0x13c>
	for (int z = 0; z < 5; ++z) {
 80002c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002ca:	3301      	adds	r3, #1
 80002cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80002ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	ddd6      	ble.n	8000282 <main+0x136>
			}
		}
	}
	for (int z = 0; z < 5; ++z) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80002d8:	e02b      	b.n	8000332 <main+0x1e6>
		for (int x = 1; x < 5; ++x) {
 80002da:	2301      	movs	r3, #1
 80002dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002de:	e022      	b.n	8000326 <main+0x1da>
			for (int y = 1; y < 5; ++y) {
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80002e4:	e016      	b.n	8000314 <main+0x1c8>
				mangba[x][y][z] = 1;
 80002e6:	4824      	ldr	r0, [pc, #144]	@ (8000378 <main+0x22c>)
 80002e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80002ec:	461a      	mov	r2, r3
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	441a      	add	r2, r3
 80002f2:	460b      	mov	r3, r1
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	440b      	add	r3, r1
 80002f8:	0099      	lsls	r1, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	441a      	add	r2, r3
 80002fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000300:	4413      	add	r3, r2
 8000302:	2201      	movs	r2, #1
 8000304:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				y++;
 8000308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800030a:	3301      	adds	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	@ 0x28
			for (int y = 1; y < 5; ++y) {
 800030e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000310:	3301      	adds	r3, #1
 8000312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000316:	2b04      	cmp	r3, #4
 8000318:	dde5      	ble.n	80002e6 <main+0x19a>
			}
			x++;
 800031a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800031c:	3301      	adds	r3, #1
 800031e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (int x = 1; x < 5; ++x) {
 8000320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000322:	3301      	adds	r3, #1
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000328:	2b04      	cmp	r3, #4
 800032a:	ddd9      	ble.n	80002e0 <main+0x194>
	for (int z = 0; z < 5; ++z) {
 800032c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800032e:	3301      	adds	r3, #1
 8000330:	633b      	str	r3, [r7, #48]	@ 0x30
 8000332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000334:	2b04      	cmp	r3, #4
 8000336:	ddd0      	ble.n	80002da <main+0x18e>
		}
	}
	hienthi(mangba,1 );
 8000338:	2101      	movs	r1, #1
 800033a:	480f      	ldr	r0, [pc, #60]	@ (8000378 <main+0x22c>)
 800033c:	f000 f980 	bl	8000640 <hienthi>
}
if(N == 2 )
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <main+0x228>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d14d      	bne.n	80003e4 <main+0x298>
{
	N++;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <main+0x228>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	4a09      	ldr	r2, [pc, #36]	@ (8000374 <main+0x228>)
 8000350:	6013      	str	r3, [r2, #0]
	Bodem++;
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <main+0x230>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3301      	adds	r3, #1
 8000358:	4a08      	ldr	r2, [pc, #32]	@ (800037c <main+0x230>)
 800035a:	6013      	str	r3, [r2, #0]
	for (int z = 0; z < 5; ++z) {
 800035c:	2300      	movs	r3, #0
 800035e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000360:	e02e      	b.n	80003c0 <main+0x274>
		for (int x = 0; x < 5; ++x) {
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
 8000366:	e025      	b.n	80003b4 <main+0x268>
			for (int y = 0; y < 5; ++y) {
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
 800036c:	e01c      	b.n	80003a8 <main+0x25c>
 800036e:	bf00      	nop
 8000370:	40011000 	.word	0x40011000
 8000374:	2000021c 	.word	0x2000021c
 8000378:	20000028 	.word	0x20000028
 800037c:	20000220 	.word	0x20000220
				mangba[x][y][z] = 0;
 8000380:	4855      	ldr	r0, [pc, #340]	@ (80004d8 <main+0x38c>)
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	6a39      	ldr	r1, [r7, #32]
 8000386:	461a      	mov	r2, r3
 8000388:	0092      	lsls	r2, r2, #2
 800038a:	441a      	add	r2, r3
 800038c:	460b      	mov	r3, r1
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	440b      	add	r3, r1
 8000392:	0099      	lsls	r1, r3, #2
 8000394:	440b      	add	r3, r1
 8000396:	441a      	add	r2, r3
 8000398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800039a:	4413      	add	r3, r2
 800039c:	2200      	movs	r2, #0
 800039e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (int y = 0; y < 5; ++y) {
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61fb      	str	r3, [r7, #28]
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	dde8      	ble.n	8000380 <main+0x234>
		for (int x = 0; x < 5; ++x) {
 80003ae:	6a3b      	ldr	r3, [r7, #32]
 80003b0:	3301      	adds	r3, #1
 80003b2:	623b      	str	r3, [r7, #32]
 80003b4:	6a3b      	ldr	r3, [r7, #32]
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	ddd6      	ble.n	8000368 <main+0x21c>
	for (int z = 0; z < 5; ++z) {
 80003ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003bc:	3301      	adds	r3, #1
 80003be:	627b      	str	r3, [r7, #36]	@ 0x24
 80003c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	ddcd      	ble.n	8000362 <main+0x216>
			}
		}
	}

	mangba[2][2][2] = 1;
 80003c6:	4b44      	ldr	r3, [pc, #272]	@ (80004d8 <main+0x38c>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	hienthi(mangba,1 );
 80003ce:	2101      	movs	r1, #1
 80003d0:	4841      	ldr	r0, [pc, #260]	@ (80004d8 <main+0x38c>)
 80003d2:	f000 f935 	bl	8000640 <hienthi>
	if(Bodem == 2)
 80003d6:	4b41      	ldr	r3, [pc, #260]	@ (80004dc <main+0x390>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d102      	bne.n	80003e4 <main+0x298>
	{
		N = 6;
 80003de:	4b40      	ldr	r3, [pc, #256]	@ (80004e0 <main+0x394>)
 80003e0:	2206      	movs	r2, #6
 80003e2:	601a      	str	r2, [r3, #0]
	}
}/*~~ket thuc hieu ung 1~~ket thuc hieu ung 1~~ket thuc hieu ung 1~~ket thuc hieu ung 1~~ket thuc hieu ung 1~~*/
/*~~bat dau hieu ung 2~~bat dau hieu ung 2~~bat dau hieu ung 2~~bat dau hieu ung 2~~bat dau hieu ung 2~~*/
	if(N == 6)
 80003e4:	4b3e      	ldr	r3, [pc, #248]	@ (80004e0 <main+0x394>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b06      	cmp	r3, #6
 80003ea:	d16b      	bne.n	80004c4 <main+0x378>
	{
		Bodem++;
 80003ec:	4b3b      	ldr	r3, [pc, #236]	@ (80004dc <main+0x390>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4a3a      	ldr	r2, [pc, #232]	@ (80004dc <main+0x390>)
 80003f4:	6013      	str	r3, [r2, #0]
		for (int z = 0; z < 5; ++z) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	e025      	b.n	8000448 <main+0x2fc>
			for (int x = 0; x < 5; ++x) {
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e01c      	b.n	800043c <main+0x2f0>
				for (int y = 0; y < 5; ++y) {
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	e013      	b.n	8000430 <main+0x2e4>
					mangba[x][y][z] = 0;
 8000408:	4833      	ldr	r0, [pc, #204]	@ (80004d8 <main+0x38c>)
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	6979      	ldr	r1, [r7, #20]
 800040e:	461a      	mov	r2, r3
 8000410:	0092      	lsls	r2, r2, #2
 8000412:	441a      	add	r2, r3
 8000414:	460b      	mov	r3, r1
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	440b      	add	r3, r1
 800041a:	0099      	lsls	r1, r3, #2
 800041c:	440b      	add	r3, r1
 800041e:	441a      	add	r2, r3
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	4413      	add	r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				for (int y = 0; y < 5; ++y) {
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	3301      	adds	r3, #1
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	2b04      	cmp	r3, #4
 8000434:	dde8      	ble.n	8000408 <main+0x2bc>
			for (int x = 0; x < 5; ++x) {
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	2b04      	cmp	r3, #4
 8000440:	dddf      	ble.n	8000402 <main+0x2b6>
		for (int z = 0; z < 5; ++z) {
 8000442:	69bb      	ldr	r3, [r7, #24]
 8000444:	3301      	adds	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
 8000448:	69bb      	ldr	r3, [r7, #24]
 800044a:	2b04      	cmp	r3, #4
 800044c:	ddd6      	ble.n	80003fc <main+0x2b0>
				}
			}
		}
		hienthi(mangba, 1);
 800044e:	2101      	movs	r1, #1
 8000450:	4821      	ldr	r0, [pc, #132]	@ (80004d8 <main+0x38c>)
 8000452:	f000 f8f5 	bl	8000640 <hienthi>
		for (int z = 0; z < 5; ++z) {
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	e025      	b.n	80004a8 <main+0x35c>
			for (int x = 0; x < 5; ++x) {
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	e01c      	b.n	800049c <main+0x350>
				for (int y = 0; y < 5; ++y) {
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	e013      	b.n	8000490 <main+0x344>
					mangba[x][y][z] = 1;
 8000468:	481b      	ldr	r0, [pc, #108]	@ (80004d8 <main+0x38c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	461a      	mov	r2, r3
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	441a      	add	r2, r3
 8000474:	460b      	mov	r3, r1
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	440b      	add	r3, r1
 800047a:	0099      	lsls	r1, r3, #2
 800047c:	440b      	add	r3, r1
 800047e:	441a      	add	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	4413      	add	r3, r2
 8000484:	2201      	movs	r2, #1
 8000486:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				for (int y = 0; y < 5; ++y) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3301      	adds	r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b04      	cmp	r3, #4
 8000494:	dde8      	ble.n	8000468 <main+0x31c>
			for (int x = 0; x < 5; ++x) {
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	3301      	adds	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	2b04      	cmp	r3, #4
 80004a0:	dddf      	ble.n	8000462 <main+0x316>
		for (int z = 0; z < 5; ++z) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	ddd6      	ble.n	800045c <main+0x310>
				}
			}
		}
		hienthi(mangba, 1);
 80004ae:	2101      	movs	r1, #1
 80004b0:	4809      	ldr	r0, [pc, #36]	@ (80004d8 <main+0x38c>)
 80004b2:	f000 f8c5 	bl	8000640 <hienthi>
		if(Bodem == 4)
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <main+0x390>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d102      	bne.n	80004c4 <main+0x378>
		{
			N = 7;
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <main+0x394>)
 80004c0:	2207      	movs	r2, #7
 80004c2:	601a      	str	r2, [r3, #0]
		}
	}
	/*~~ket thuc hieu ung 2~~ket thuc hieu ung 2~~ket thuc hieu ung 2~~ket thuc hieu ung 2~~ket thuc hieu ung 2~~*/
	/*~~bat dau hieu ung 3~~bat dau hieu ung 3~~bat dau hieu ung 3~~bat dau hieu ung 3~~bat dau hieu ung 3~~*/
if(N == 7)
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <main+0x394>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b07      	cmp	r3, #7
 80004ca:	f47f ae48 	bne.w	800015e <main+0x12>
{
	plane('X',1);
 80004ce:	2101      	movs	r1, #1
 80004d0:	2058      	movs	r0, #88	@ 0x58
 80004d2:	f000 f9d5 	bl	8000880 <plane>
	 HAL_GPIO_WritePin(Led_BL_GPIO_Port, Led_BL_Pin, 1);
 80004d6:	e642      	b.n	800015e <main+0x12>
 80004d8:	20000028 	.word	0x20000028
 80004dc:	20000220 	.word	0x20000220
 80004e0:	2000021c 	.word	0x2000021c

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b090      	sub	sp, #64	@ 0x40
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	2228      	movs	r2, #40	@ 0x28
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fad0 	bl	8001a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050e:	2310      	movs	r3, #16
 8000510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000512:	2300      	movs	r3, #0
 8000514:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fede 	bl	80012dc <HAL_RCC_OscConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000526:	f000 fb42 	bl	8000bae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052a:	230f      	movs	r3, #15
 800052c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f001 f94c 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800054e:	f000 fb2e 	bl	8000bae <Error_Handler>
  }
}
 8000552:	bf00      	nop
 8000554:	3740      	adds	r7, #64	@ 0x40
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b30      	ldr	r3, [pc, #192]	@ (8000634 <MX_GPIO_Init+0xd8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a2f      	ldr	r2, [pc, #188]	@ (8000634 <MX_GPIO_Init+0xd8>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <MX_GPIO_Init+0xd8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000588:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <MX_GPIO_Init+0xd8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a29      	ldr	r2, [pc, #164]	@ (8000634 <MX_GPIO_Init+0xd8>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <MX_GPIO_Init+0xd8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0308 	and.w	r3, r3, #8
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <MX_GPIO_Init+0xd8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a23      	ldr	r2, [pc, #140]	@ (8000634 <MX_GPIO_Init+0xd8>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_GPIO_Init+0xd8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_BL_GPIO_Port, Led_BL_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	481e      	ldr	r0, [pc, #120]	@ (8000638 <MX_GPIO_Init+0xdc>)
 80005c0:	f000 fe74 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Clock_Pin|Latch_Pin|DS_Pin|BJT1_Pin
 80005c4:	2200      	movs	r2, #0
 80005c6:	f24e 01f8 	movw	r1, #57592	@ 0xe0f8
 80005ca:	481c      	ldr	r0, [pc, #112]	@ (800063c <MX_GPIO_Init+0xe0>)
 80005cc:	f000 fe6e 	bl	80012ac <HAL_GPIO_WritePin>
                          |BJT2_Pin|BJT3_Pin|BJT4_Pin|BJT5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_BL_Pin */
  GPIO_InitStruct.Pin = Led_BL_Pin;
 80005d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2302      	movs	r3, #2
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_BL_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <MX_GPIO_Init+0xdc>)
 80005ea:	f000 fcdb 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Clock_Pin DS_Pin */
  GPIO_InitStruct.Pin = Clock_Pin|DS_Pin;
 80005ee:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	480d      	ldr	r0, [pc, #52]	@ (800063c <MX_GPIO_Init+0xe0>)
 8000608:	f000 fccc 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_Pin BJT1_Pin BJT2_Pin BJT3_Pin
                           BJT4_Pin BJT5_Pin */
  GPIO_InitStruct.Pin = Latch_Pin|BJT1_Pin|BJT2_Pin|BJT3_Pin
 800060c:	f244 03f8 	movw	r3, #16632	@ 0x40f8
 8000610:	613b      	str	r3, [r7, #16]
                          |BJT4_Pin|BJT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_GPIO_Init+0xe0>)
 8000626:	f000 fcbd 	bl	8000fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	40011000 	.word	0x40011000
 800063c:	40010c00 	.word	0x40010c00

08000640 <hienthi>:

/* USER CODE BEGIN 4 */
void hienthi(int mangba[5][5][5], int Solan){/* Solan la' thoi sang cua mot lan' hien thi*/
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	for(int t = 0; t < Solan; t++ )
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e03b      	b.n	80006c8 <hienthi+0x88>
	{
        for (int z=0; z<5; z++) {
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	e032      	b.n	80006bc <hienthi+0x7c>
          for (int x=0; x<5; x++) {
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e01c      	b.n	8000696 <hienthi+0x56>
            for (int y=0; y<5; y++) {
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e013      	b.n	800068a <hienthi+0x4a>
              dich74hc595(mangba[x][y][z]);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2264      	movs	r2, #100	@ 0x64
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	18d1      	adds	r1, r2, r3
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	4413      	add	r3, r2
 800067a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f82c 	bl	80006dc <dich74hc595>
            for (int y=0; y<5; y++) {
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b04      	cmp	r3, #4
 800068e:	dde8      	ble.n	8000662 <hienthi+0x22>
          for (int x=0; x<5; x++) {
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2b04      	cmp	r3, #4
 800069a:	dddf      	ble.n	800065c <hienthi+0x1c>
            }
          }
          mo74hc595();
 800069c:	f000 f854 	bl	8000748 <mo74hc595>
          tangz_on(z);
 80006a0:	6938      	ldr	r0, [r7, #16]
 80006a2:	f000 f879 	bl	8000798 <tangz_on>
          HAL_Delay(30); /* thoi gian sang cua moi~ tang' */
 80006a6:	201e      	movs	r0, #30
 80006a8:	f000 fb74 	bl	8000d94 <HAL_Delay>
          tangz_off(z);
 80006ac:	6938      	ldr	r0, [r7, #16]
 80006ae:	f000 f8ad 	bl	800080c <tangz_off>
          reset();
 80006b2:	f000 f85b 	bl	800076c <reset>
        for (int z=0; z<5; z++) {
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3301      	adds	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	ddc9      	ble.n	8000656 <hienthi+0x16>
	for(int t = 0; t < Solan; t++ )
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbbf      	blt.n	8000650 <hienthi+0x10>
      }
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <dich74hc595>:
void dich74hc595(int a)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    if (a==0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d112      	bne.n	8000710 <dich74hc595+0x34>
    	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f0:	4814      	ldr	r0, [pc, #80]	@ (8000744 <dich74hc595+0x68>)
 80006f2:	f000 fddb 	bl	80012ac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Clock_GPIO_Port, Clock_Pin,0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fc:	4811      	ldr	r0, [pc, #68]	@ (8000744 <dich74hc595+0x68>)
 80006fe:	f000 fdd5 	bl	80012ac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Clock_GPIO_Port, Clock_Pin,1);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000708:	480e      	ldr	r0, [pc, #56]	@ (8000744 <dich74hc595+0x68>)
 800070a:	f000 fdcf 	bl	80012ac <HAL_GPIO_WritePin>
    } else if(a==1) {
    	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 1);
    	HAL_GPIO_WritePin(Clock_GPIO_Port, Clock_Pin,0);
    	HAL_GPIO_WritePin(Clock_GPIO_Port, Clock_Pin,1);
    }
}
 800070e:	e014      	b.n	800073a <dich74hc595+0x5e>
    } else if(a==1) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d111      	bne.n	800073a <dich74hc595+0x5e>
    	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <dich74hc595+0x68>)
 800071e:	f000 fdc5 	bl	80012ac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Clock_GPIO_Port, Clock_Pin,0);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000728:	4806      	ldr	r0, [pc, #24]	@ (8000744 <dich74hc595+0x68>)
 800072a:	f000 fdbf 	bl	80012ac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Clock_GPIO_Port, Clock_Pin,1);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <dich74hc595+0x68>)
 8000736:	f000 fdb9 	bl	80012ac <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010c00 	.word	0x40010c00

08000748 <mo74hc595>:
void mo74hc595()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <mo74hc595+0x20>)
 8000754:	f000 fdaa 	bl	80012ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075e:	4802      	ldr	r0, [pc, #8]	@ (8000768 <mo74hc595+0x20>)
 8000760:	f000 fda4 	bl	80012ac <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010c00 	.word	0x40010c00

0800076c <reset>:
void reset() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
    for (int t=0; t<25; t++) {
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	e005      	b.n	8000784 <reset+0x18>
        dich74hc595(0);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ffaf 	bl	80006dc <dich74hc595>
    for (int t=0; t<25; t++) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b18      	cmp	r3, #24
 8000788:	ddf6      	ble.n	8000778 <reset+0xc>
    }
    mo74hc595();
 800078a:	f7ff ffdd 	bl	8000748 <mo74hc595>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <tangz_on>:
void tangz_on(int z)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	switch (z) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d82a      	bhi.n	80007fc <tangz_on+0x64>
 80007a6:	a201      	add	r2, pc, #4	@ (adr r2, 80007ac <tangz_on+0x14>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	080007c1 	.word	0x080007c1
 80007b0:	080007cd 	.word	0x080007cd
 80007b4:	080007d9 	.word	0x080007d9
 80007b8:	080007e5 	.word	0x080007e5
 80007bc:	080007f1 	.word	0x080007f1
		case 0:
			HAL_GPIO_WritePin(BJT1_GPIO_Port, BJT1_Pin, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2108      	movs	r1, #8
 80007c4:	4810      	ldr	r0, [pc, #64]	@ (8000808 <tangz_on+0x70>)
 80007c6:	f000 fd71 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 80007ca:	e018      	b.n	80007fe <tangz_on+0x66>
		case 1:
			HAL_GPIO_WritePin(BJT2_GPIO_Port, BJT2_Pin, 1);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <tangz_on+0x70>)
 80007d2:	f000 fd6b 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 80007d6:	e012      	b.n	80007fe <tangz_on+0x66>
		case 2:
			HAL_GPIO_WritePin(BJT3_GPIO_Port, BJT3_Pin, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2120      	movs	r1, #32
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <tangz_on+0x70>)
 80007de:	f000 fd65 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 80007e2:	e00c      	b.n	80007fe <tangz_on+0x66>
		case 3:
			HAL_GPIO_WritePin(BJT4_GPIO_Port, BJT4_Pin, 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2140      	movs	r1, #64	@ 0x40
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <tangz_on+0x70>)
 80007ea:	f000 fd5f 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 80007ee:	e006      	b.n	80007fe <tangz_on+0x66>
		case 4:
			HAL_GPIO_WritePin(BJT5_GPIO_Port, BJT5_Pin, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2180      	movs	r1, #128	@ 0x80
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <tangz_on+0x70>)
 80007f6:	f000 fd59 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 80007fa:	e000      	b.n	80007fe <tangz_on+0x66>
		default:
			break;
 80007fc:	bf00      	nop
	}
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010c00 	.word	0x40010c00

0800080c <tangz_off>:
void tangz_off(int z)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	switch (z) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d82a      	bhi.n	8000870 <tangz_off+0x64>
 800081a:	a201      	add	r2, pc, #4	@ (adr r2, 8000820 <tangz_off+0x14>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000835 	.word	0x08000835
 8000824:	08000841 	.word	0x08000841
 8000828:	0800084d 	.word	0x0800084d
 800082c:	08000859 	.word	0x08000859
 8000830:	08000865 	.word	0x08000865
		case 0:
			HAL_GPIO_WritePin(BJT1_GPIO_Port, BJT1_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	4810      	ldr	r0, [pc, #64]	@ (800087c <tangz_off+0x70>)
 800083a:	f000 fd37 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 800083e:	e018      	b.n	8000872 <tangz_off+0x66>
		case 1:
			HAL_GPIO_WritePin(BJT2_GPIO_Port, BJT2_Pin, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2110      	movs	r1, #16
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <tangz_off+0x70>)
 8000846:	f000 fd31 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 800084a:	e012      	b.n	8000872 <tangz_off+0x66>
		case 2:
			HAL_GPIO_WritePin(BJT3_GPIO_Port, BJT3_Pin, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2120      	movs	r1, #32
 8000850:	480a      	ldr	r0, [pc, #40]	@ (800087c <tangz_off+0x70>)
 8000852:	f000 fd2b 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 8000856:	e00c      	b.n	8000872 <tangz_off+0x66>
		case 3:
			HAL_GPIO_WritePin(BJT4_GPIO_Port, BJT4_Pin, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	@ 0x40
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <tangz_off+0x70>)
 800085e:	f000 fd25 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 8000862:	e006      	b.n	8000872 <tangz_off+0x66>
		case 4:
			HAL_GPIO_WritePin(BJT5_GPIO_Port, BJT5_Pin, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <tangz_off+0x70>)
 800086a:	f000 fd1f 	bl	80012ac <HAL_GPIO_WritePin>
			break;
 800086e:	e000      	b.n	8000872 <tangz_off+0x66>
		default:
			break;
 8000870:	bf00      	nop
	}
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010c00 	.word	0x40010c00

08000880 <plane>:
void plane(char truc, int Solan)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8000886:	af00      	add	r7, sp, #0
 8000888:	4602      	mov	r2, r0
 800088a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800088e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000892:	6019      	str	r1, [r3, #0]
 8000894:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000898:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800089c:	701a      	strb	r2, [r3, #0]
    int mangba[5][5][5] = { 0 };
 800089e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80008a2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80008a6:	4618      	mov	r0, r3
 80008a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008ac:	461a      	mov	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f001 f8f2 	bl	8001a98 <memset>
    for (int i = 0; i < 5; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80008ba:	e0a8      	b.n	8000a0e <plane+0x18e>
    {
        for (int z = 0; z < 5; z++)
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80008c2:	e090      	b.n	80009e6 <plane+0x166>
        {
            for (int x = 0; x < 5; x++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80008ca:	e082      	b.n	80009d2 <plane+0x152>
            {
                for (int y = 0; y < 5; y++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80008d2:	e075      	b.n	80009c0 <plane+0x140>
                {
                    mangba[x][y][z] = 0;
 80008d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80008d8:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 80008dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80008e0:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 80008e4:	461a      	mov	r2, r3
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	441a      	add	r2, r3
 80008ea:	460b      	mov	r3, r1
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	440b      	add	r3, r1
 80008f0:	0099      	lsls	r1, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	441a      	add	r2, r3
 80008f6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80008fa:	4413      	add	r3, r2
 80008fc:	2200      	movs	r2, #0
 80008fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    if (truc == 'X')
 8000902:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000906:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b58      	cmp	r3, #88	@ 0x58
 800090e:	d116      	bne.n	800093e <plane+0xbe>
                    {
                        mangba[i][y][z] = 1;
 8000910:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000914:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 8000918:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800091c:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 8000920:	461a      	mov	r2, r3
 8000922:	0092      	lsls	r2, r2, #2
 8000924:	441a      	add	r2, r3
 8000926:	460b      	mov	r3, r1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	0099      	lsls	r1, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	441a      	add	r2, r3
 8000932:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000936:	4413      	add	r3, r2
 8000938:	2201      	movs	r2, #1
 800093a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    }
                    if (truc == 'Y')
 800093e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000942:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b59      	cmp	r3, #89	@ 0x59
 800094a:	d116      	bne.n	800097a <plane+0xfa>
                    {
                        mangba[x][i][z] = 1;
 800094c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000950:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 8000954:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000958:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 800095c:	461a      	mov	r2, r3
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	441a      	add	r2, r3
 8000962:	460b      	mov	r3, r1
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	0099      	lsls	r1, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	441a      	add	r2, r3
 800096e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000972:	4413      	add	r3, r2
 8000974:	2201      	movs	r2, #1
 8000976:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    }
                    if (truc == 'Z')
 800097a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800097e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b5a      	cmp	r3, #90	@ 0x5a
 8000986:	d116      	bne.n	80009b6 <plane+0x136>
                    {
                        mangba[x][y][i] = 1;
 8000988:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800098c:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 8000990:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000994:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8000998:	461a      	mov	r2, r3
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	441a      	add	r2, r3
 800099e:	460b      	mov	r3, r1
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	440b      	add	r3, r1
 80009a4:	0099      	lsls	r1, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	441a      	add	r2, r3
 80009aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80009ae:	4413      	add	r3, r2
 80009b0:	2201      	movs	r2, #1
 80009b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (int y = 0; y < 5; y++)
 80009b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80009ba:	3301      	adds	r3, #1
 80009bc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80009c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	dd85      	ble.n	80008d4 <plane+0x54>
            for (int x = 0; x < 5; x++)
 80009c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009cc:	3301      	adds	r3, #1
 80009ce:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80009d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	f77f af78 	ble.w	80008cc <plane+0x4c>
        for (int z = 0; z < 5; z++)
 80009dc:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80009e0:	3301      	adds	r3, #1
 80009e2:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80009e6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	f77f af6a 	ble.w	80008c4 <plane+0x44>
                    }
                }
            }
        }
        hienthi(mangba, Solan);
 80009f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80009f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80009f8:	f107 020c 	add.w	r2, r7, #12
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	4610      	mov	r0, r2
 8000a00:	f7ff fe1e 	bl	8000640 <hienthi>
    for (int i = 0; i < 5; i++)
 8000a04:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000a08:	3301      	adds	r3, #1
 8000a0a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000a0e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	f77f af52 	ble.w	80008bc <plane+0x3c>
    }
    for (int i = 3; i >= 0; i--)
 8000a18:	2303      	movs	r3, #3
 8000a1a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000a1e:	e0bb      	b.n	8000b98 <plane+0x318>
    {
        for (int z = 0; z < 5; z++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8000a26:	e0a3      	b.n	8000b70 <plane+0x2f0>
        {
            for (int x = 0; x < 5; x++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000a2e:	e095      	b.n	8000b5c <plane+0x2dc>
            {
                for (int y = 0; y < 5; y++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8000a36:	e087      	b.n	8000b48 <plane+0x2c8>
                {
                    mangba[4 - x][4 - y][4 - z] = 0;
 8000a38:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000a3c:	f1c3 0104 	rsb	r1, r3, #4
 8000a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000a44:	f1c3 0304 	rsb	r3, r3, #4
 8000a48:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8000a4c:	f1c2 0404 	rsb	r4, r2, #4
 8000a50:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000a54:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	441a      	add	r2, r3
 8000a5e:	460b      	mov	r3, r1
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	440b      	add	r3, r1
 8000a64:	0099      	lsls	r1, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	4413      	add	r3, r2
 8000a6a:	4423      	add	r3, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    if (truc == 'X')
 8000a72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000a76:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b58      	cmp	r3, #88	@ 0x58
 8000a7e:	d11a      	bne.n	8000ab6 <plane+0x236>
                    {
                        mangba[i][4 - y][4 - z] = 1;
 8000a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000a84:	f1c3 0304 	rsb	r3, r3, #4
 8000a88:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8000a8c:	f1c2 0404 	rsb	r4, r2, #4
 8000a90:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000a94:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 8000a98:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	441a      	add	r2, r3
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	0099      	lsls	r1, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	4413      	add	r3, r2
 8000aae:	4423      	add	r3, r4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    }
                    if (truc == 'Y')
 8000ab6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000aba:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b59      	cmp	r3, #89	@ 0x59
 8000ac2:	d11a      	bne.n	8000afa <plane+0x27a>
                    {
                        mangba[4 - x][i][4 - z] = 1;
 8000ac4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000ac8:	f1c3 0104 	rsb	r1, r3, #4
 8000acc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000ad0:	f1c3 0404 	rsb	r4, r3, #4
 8000ad4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ad8:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 8000adc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	441a      	add	r2, r3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	0099      	lsls	r1, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	4413      	add	r3, r2
 8000af2:	4423      	add	r3, r4
 8000af4:	2201      	movs	r2, #1
 8000af6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    }
                    if (truc == 'Z')
 8000afa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000afe:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b5a      	cmp	r3, #90	@ 0x5a
 8000b06:	d11a      	bne.n	8000b3e <plane+0x2be>
                    {
                        mangba[4 - x][4 - y][i] = 1;
 8000b08:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000b0c:	f1c3 0104 	rsb	r1, r3, #4
 8000b10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000b14:	f1c3 0304 	rsb	r3, r3, #4
 8000b18:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000b1c:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 8000b20:	461a      	mov	r2, r3
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	441a      	add	r2, r3
 8000b26:	460b      	mov	r3, r1
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	0099      	lsls	r1, r3, #2
 8000b2e:	440b      	add	r3, r1
 8000b30:	441a      	add	r2, r3
 8000b32:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000b36:	4413      	add	r3, r2
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (int y = 0; y < 5; y++)
 8000b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000b42:	3301      	adds	r3, #1
 8000b44:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8000b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	f77f af73 	ble.w	8000a38 <plane+0x1b8>
            for (int x = 0; x < 5; x++)
 8000b52:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000b56:	3301      	adds	r3, #1
 8000b58:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000b5c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	f77f af65 	ble.w	8000a30 <plane+0x1b0>
        for (int z = 0; z < 5; z++)
 8000b66:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8000b70:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	f77f af57 	ble.w	8000a28 <plane+0x1a8>
                    }
                }
            }
        }
        hienthi(mangba, Solan);
 8000b7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000b7e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000b82:	f107 020c 	add.w	r2, r7, #12
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	4610      	mov	r0, r2
 8000b8a:	f7ff fd59 	bl	8000640 <hienthi>
    for (int i = 3; i >= 0; i--)
 8000b8e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000b98:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f6bf af3f 	bge.w	8000a20 <plane+0x1a0>
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}

08000bae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb2:	b672      	cpsid	i
}
 8000bb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb6:	bf00      	nop
 8000bb8:	e7fd      	b.n	8000bb6 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <HAL_MspInit+0x5c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <HAL_MspInit+0x5c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_MspInit+0x60>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_MspInit+0x60>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f874 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c84:	f7ff fff8 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c8a:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ca0:	4c09      	ldr	r4, [pc, #36]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f000 fefb 	bl	8001aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fa4b 	bl	800014c <main>
  bx lr
 8000cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc0:	08001b34 	.word	0x08001b34
  ldr r2, =_sbss
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc8:	20000228 	.word	0x20000228

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_Init+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_Init+0x28>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f92b 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff ff66 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f935 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f90b 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a03      	ldr	r2, [pc, #12]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000224 	.word	0x20000224

08000d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	@ (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000224 	.word	0x20000224

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffe0 	bl	8000d80 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff90 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff49 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff5e 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff90 	bl	8000e94 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5f 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffb0 	bl	8000ef8 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b08b      	sub	sp, #44	@ 0x2c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e169      	b.n	800128c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8158 	bne.w	8001286 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a9a      	ldr	r2, [pc, #616]	@ (8001244 <HAL_GPIO_Init+0x2a0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d05e      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8000fe0:	4a98      	ldr	r2, [pc, #608]	@ (8001244 <HAL_GPIO_Init+0x2a0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d875      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8000fe6:	4a98      	ldr	r2, [pc, #608]	@ (8001248 <HAL_GPIO_Init+0x2a4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d058      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8000fec:	4a96      	ldr	r2, [pc, #600]	@ (8001248 <HAL_GPIO_Init+0x2a4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d86f      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8000ff2:	4a96      	ldr	r2, [pc, #600]	@ (800124c <HAL_GPIO_Init+0x2a8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d052      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8000ff8:	4a94      	ldr	r2, [pc, #592]	@ (800124c <HAL_GPIO_Init+0x2a8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d869      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8000ffe:	4a94      	ldr	r2, [pc, #592]	@ (8001250 <HAL_GPIO_Init+0x2ac>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d04c      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8001004:	4a92      	ldr	r2, [pc, #584]	@ (8001250 <HAL_GPIO_Init+0x2ac>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d863      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 800100a:	4a92      	ldr	r2, [pc, #584]	@ (8001254 <HAL_GPIO_Init+0x2b0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d046      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8001010:	4a90      	ldr	r2, [pc, #576]	@ (8001254 <HAL_GPIO_Init+0x2b0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d85d      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8001016:	2b12      	cmp	r3, #18
 8001018:	d82a      	bhi.n	8001070 <HAL_GPIO_Init+0xcc>
 800101a:	2b12      	cmp	r3, #18
 800101c:	d859      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 800101e:	a201      	add	r2, pc, #4	@ (adr r2, 8001024 <HAL_GPIO_Init+0x80>)
 8001020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001024:	0800109f 	.word	0x0800109f
 8001028:	08001079 	.word	0x08001079
 800102c:	0800108b 	.word	0x0800108b
 8001030:	080010cd 	.word	0x080010cd
 8001034:	080010d3 	.word	0x080010d3
 8001038:	080010d3 	.word	0x080010d3
 800103c:	080010d3 	.word	0x080010d3
 8001040:	080010d3 	.word	0x080010d3
 8001044:	080010d3 	.word	0x080010d3
 8001048:	080010d3 	.word	0x080010d3
 800104c:	080010d3 	.word	0x080010d3
 8001050:	080010d3 	.word	0x080010d3
 8001054:	080010d3 	.word	0x080010d3
 8001058:	080010d3 	.word	0x080010d3
 800105c:	080010d3 	.word	0x080010d3
 8001060:	080010d3 	.word	0x080010d3
 8001064:	080010d3 	.word	0x080010d3
 8001068:	08001081 	.word	0x08001081
 800106c:	08001095 	.word	0x08001095
 8001070:	4a79      	ldr	r2, [pc, #484]	@ (8001258 <HAL_GPIO_Init+0x2b4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001076:	e02c      	b.n	80010d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e029      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	3304      	adds	r3, #4
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e024      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	3308      	adds	r3, #8
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e01f      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	330c      	adds	r3, #12
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e01a      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010a6:	2304      	movs	r3, #4
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e013      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b4:	2308      	movs	r3, #8
 80010b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	611a      	str	r2, [r3, #16]
          break;
 80010be:	e009      	b.n	80010d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c0:	2308      	movs	r3, #8
 80010c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	615a      	str	r2, [r3, #20]
          break;
 80010ca:	e003      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          break;
 80010d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	@ 0xff
 80010d8:	d801      	bhi.n	80010de <HAL_GPIO_Init+0x13a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e001      	b.n	80010e2 <HAL_GPIO_Init+0x13e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2bff      	cmp	r3, #255	@ 0xff
 80010e8:	d802      	bhi.n	80010f0 <HAL_GPIO_Init+0x14c>
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x152>
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	3b08      	subs	r3, #8
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	210f      	movs	r1, #15
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	6a39      	ldr	r1, [r7, #32]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 80b1 	beq.w	8001286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001124:	4b4d      	ldr	r3, [pc, #308]	@ (800125c <HAL_GPIO_Init+0x2b8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a4c      	ldr	r2, [pc, #304]	@ (800125c <HAL_GPIO_Init+0x2b8>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b4a      	ldr	r3, [pc, #296]	@ (800125c <HAL_GPIO_Init+0x2b8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800113c:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <HAL_GPIO_Init+0x2bc>)
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a40      	ldr	r2, [pc, #256]	@ (8001264 <HAL_GPIO_Init+0x2c0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d013      	beq.n	8001190 <HAL_GPIO_Init+0x1ec>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3f      	ldr	r2, [pc, #252]	@ (8001268 <HAL_GPIO_Init+0x2c4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1e8>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3e      	ldr	r2, [pc, #248]	@ (800126c <HAL_GPIO_Init+0x2c8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1e4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a3d      	ldr	r2, [pc, #244]	@ (8001270 <HAL_GPIO_Init+0x2cc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1e0>
 8001180:	2303      	movs	r3, #3
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x1ee>
 8001184:	2304      	movs	r3, #4
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x1ee>
 8001188:	2302      	movs	r3, #2
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x1ee>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x1ee>
 8001190:	2300      	movs	r3, #0
 8001192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011a2:	492f      	ldr	r1, [pc, #188]	@ (8001260 <HAL_GPIO_Init+0x2bc>)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	492c      	ldr	r1, [pc, #176]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4928      	ldr	r1, [pc, #160]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e4:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	4922      	ldr	r1, [pc, #136]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	491e      	ldr	r1, [pc, #120]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4918      	ldr	r1, [pc, #96]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4914      	ldr	r1, [pc, #80]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 8001224:	4013      	ands	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d021      	beq.n	8001278 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	490e      	ldr	r1, [pc, #56]	@ (8001274 <HAL_GPIO_Init+0x2d0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e021      	b.n	8001286 <HAL_GPIO_Init+0x2e2>
 8001242:	bf00      	nop
 8001244:	10320000 	.word	0x10320000
 8001248:	10310000 	.word	0x10310000
 800124c:	10220000 	.word	0x10220000
 8001250:	10210000 	.word	0x10210000
 8001254:	10120000 	.word	0x10120000
 8001258:	10110000 	.word	0x10110000
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	40010800 	.word	0x40010800
 8001268:	40010c00 	.word	0x40010c00
 800126c:	40011000 	.word	0x40011000
 8001270:	40011400 	.word	0x40011400
 8001274:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	43db      	mvns	r3, r3
 8001280:	4909      	ldr	r1, [pc, #36]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 8001282:	4013      	ands	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	3301      	adds	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f ae8e 	bne.w	8000fb8 <HAL_GPIO_Init+0x14>
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	372c      	adds	r7, #44	@ 0x2c
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	611a      	str	r2, [r3, #16]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e272      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8087 	beq.w	800140a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012fc:	4b92      	ldr	r3, [pc, #584]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b04      	cmp	r3, #4
 8001306:	d00c      	beq.n	8001322 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001308:	4b8f      	ldr	r3, [pc, #572]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b08      	cmp	r3, #8
 8001312:	d112      	bne.n	800133a <HAL_RCC_OscConfig+0x5e>
 8001314:	4b8c      	ldr	r3, [pc, #560]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d10b      	bne.n	800133a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001322:	4b89      	ldr	r3, [pc, #548]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d06c      	beq.n	8001408 <HAL_RCC_OscConfig+0x12c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d168      	bne.n	8001408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e24c      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x76>
 8001344:	4b80      	ldr	r3, [pc, #512]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a7f      	ldr	r2, [pc, #508]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800134a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	e02e      	b.n	80013b0 <HAL_RCC_OscConfig+0xd4>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x98>
 800135a:	4b7b      	ldr	r3, [pc, #492]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a7a      	ldr	r2, [pc, #488]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b78      	ldr	r3, [pc, #480]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a77      	ldr	r2, [pc, #476]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800136c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e01d      	b.n	80013b0 <HAL_RCC_OscConfig+0xd4>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0xbc>
 800137e:	4b72      	ldr	r3, [pc, #456]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a71      	ldr	r2, [pc, #452]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b6f      	ldr	r3, [pc, #444]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6e      	ldr	r2, [pc, #440]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0xd4>
 8001398:	4b6b      	ldr	r3, [pc, #428]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a6a      	ldr	r2, [pc, #424]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800139e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b68      	ldr	r3, [pc, #416]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a67      	ldr	r2, [pc, #412]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d013      	beq.n	80013e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fce2 	bl	8000d80 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fcde 	bl	8000d80 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e200      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe4>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcce 	bl	8000d80 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcca 	bl	8000d80 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1ec      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x10c>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d063      	beq.n	80014de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001416:	4b4c      	ldr	r3, [pc, #304]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001422:	4b49      	ldr	r3, [pc, #292]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b08      	cmp	r3, #8
 800142c:	d11c      	bne.n	8001468 <HAL_RCC_OscConfig+0x18c>
 800142e:	4b46      	ldr	r3, [pc, #280]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	4b43      	ldr	r3, [pc, #268]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <HAL_RCC_OscConfig+0x176>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d001      	beq.n	8001452 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e1c0      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	4b3d      	ldr	r3, [pc, #244]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4939      	ldr	r1, [pc, #228]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	e03a      	b.n	80014de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d020      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001470:	4b36      	ldr	r3, [pc, #216]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fc83 	bl	8000d80 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff fc7f 	bl	8000d80 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e1a1      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4927      	ldr	r1, [pc, #156]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
 80014b0:	e015      	b.n	80014de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc62 	bl	8000d80 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc5e 	bl	8000d80 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e180      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03a      	beq.n	8001560 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d019      	beq.n	8001526 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <HAL_RCC_OscConfig+0x274>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fc42 	bl	8000d80 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff fc3e 	bl	8000d80 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e160      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_RCC_OscConfig+0x26c>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f000 fa9c 	bl	8001a5c <RCC_Delay>
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_RCC_OscConfig+0x274>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fc28 	bl	8000d80 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001532:	e00f      	b.n	8001554 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fc24 	bl	8000d80 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d908      	bls.n	8001554 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e146      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	42420000 	.word	0x42420000
 8001550:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	4b92      	ldr	r3, [pc, #584]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e9      	bne.n	8001534 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a6 	beq.w	80016ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001572:	4b8b      	ldr	r3, [pc, #556]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b88      	ldr	r3, [pc, #544]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a87      	ldr	r2, [pc, #540]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b85      	ldr	r3, [pc, #532]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b82      	ldr	r3, [pc, #520]	@ (80017a4 <HAL_RCC_OscConfig+0x4c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b7f      	ldr	r3, [pc, #508]	@ (80017a4 <HAL_RCC_OscConfig+0x4c8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7e      	ldr	r2, [pc, #504]	@ (80017a4 <HAL_RCC_OscConfig+0x4c8>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbe5 	bl	8000d80 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fbe1 	bl	8000d80 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	@ 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e103      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b75      	ldr	r3, [pc, #468]	@ (80017a4 <HAL_RCC_OscConfig+0x4c8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x312>
 80015e0:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a6e      	ldr	r2, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	e02d      	b.n	800164a <HAL_RCC_OscConfig+0x36e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x334>
 80015f6:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a69      	ldr	r2, [pc, #420]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4b67      	ldr	r3, [pc, #412]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a66      	ldr	r2, [pc, #408]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	e01c      	b.n	800164a <HAL_RCC_OscConfig+0x36e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x356>
 8001618:	4b61      	ldr	r3, [pc, #388]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a60      	ldr	r2, [pc, #384]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4b5e      	ldr	r3, [pc, #376]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e00b      	b.n	800164a <HAL_RCC_OscConfig+0x36e>
 8001632:	4b5b      	ldr	r3, [pc, #364]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a5a      	ldr	r2, [pc, #360]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b58      	ldr	r3, [pc, #352]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a57      	ldr	r2, [pc, #348]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d015      	beq.n	800167e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb95 	bl	8000d80 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fb91 	bl	8000d80 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0b1      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ee      	beq.n	800165a <HAL_RCC_OscConfig+0x37e>
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb7f 	bl	8000d80 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb7b 	bl	8000d80 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e09b      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ee      	bne.n	8001686 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d105      	bne.n	80016ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ae:	4b3c      	ldr	r3, [pc, #240]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a3b      	ldr	r2, [pc, #236]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8087 	beq.w	80017d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d061      	beq.n	8001794 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d146      	bne.n	8001766 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d8:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <HAL_RCC_OscConfig+0x4cc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb4f 	bl	8000d80 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb4b 	bl	8000d80 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e06d      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800170e:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4921      	ldr	r1, [pc, #132]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a19      	ldr	r1, [r3, #32]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	430b      	orrs	r3, r1
 8001732:	491b      	ldr	r1, [pc, #108]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fb1f 	bl	8000d80 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff fb1b 	bl	8000d80 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e03d      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x46a>
 8001764:	e035      	b.n	80017d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_RCC_OscConfig+0x4cc>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fb08 	bl	8000d80 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fb04 	bl	8000d80 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e026      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x498>
 8001792:	e01e      	b.n	80017d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e019      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
 80017a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_RCC_OscConfig+0x500>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0d0      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b6a      	ldr	r3, [pc, #424]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b67      	ldr	r3, [pc, #412]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4965      	ldr	r1, [pc, #404]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a58      	ldr	r2, [pc, #352]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800185e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d040      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b41      	ldr	r3, [pc, #260]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e073      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4936      	ldr	r1, [pc, #216]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff fa56 	bl	8000d80 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff fa52 	bl	8000d80 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e053      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d210      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4922      	ldr	r1, [pc, #136]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_RCC_ClockConfig+0x1cc>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_ClockConfig+0x1d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9b4 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08001b08 	.word	0x08001b08
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x30>
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x36>
 80019e2:	e027      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80019e6:	613b      	str	r3, [r7, #16]
      break;
 80019e8:	e027      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	0c9b      	lsrs	r3, r3, #18
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0c5b      	lsrs	r3, r3, #17
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a16:	fb03 f202 	mul.w	r2, r3, r2
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e004      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	613b      	str	r3, [r7, #16]
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a36:	613b      	str	r3, [r7, #16]
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	693b      	ldr	r3, [r7, #16]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	007a1200 	.word	0x007a1200
 8001a50:	08001b18 	.word	0x08001b18
 8001a54:	08001b28 	.word	0x08001b28
 8001a58:	003d0900 	.word	0x003d0900

08001a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a64:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <RCC_Delay+0x34>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <RCC_Delay+0x38>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0a5b      	lsrs	r3, r3, #9
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a78:	bf00      	nop
  }
  while (Delay --);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	60fa      	str	r2, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <RCC_Delay+0x1c>
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000000 	.word	0x20000000
 8001a94:	10624dd3 	.word	0x10624dd3

08001a98 <memset>:
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4402      	add	r2, r0
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <memset+0xa>
 8001aa0:	4770      	bx	lr
 8001aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8001aa6:	e7f9      	b.n	8001a9c <memset+0x4>

08001aa8 <__libc_init_array>:
 8001aa8:	b570      	push	{r4, r5, r6, lr}
 8001aaa:	2600      	movs	r6, #0
 8001aac:	4d0c      	ldr	r5, [pc, #48]	@ (8001ae0 <__libc_init_array+0x38>)
 8001aae:	4c0d      	ldr	r4, [pc, #52]	@ (8001ae4 <__libc_init_array+0x3c>)
 8001ab0:	1b64      	subs	r4, r4, r5
 8001ab2:	10a4      	asrs	r4, r4, #2
 8001ab4:	42a6      	cmp	r6, r4
 8001ab6:	d109      	bne.n	8001acc <__libc_init_array+0x24>
 8001ab8:	f000 f81a 	bl	8001af0 <_init>
 8001abc:	2600      	movs	r6, #0
 8001abe:	4d0a      	ldr	r5, [pc, #40]	@ (8001ae8 <__libc_init_array+0x40>)
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <__libc_init_array+0x44>)
 8001ac2:	1b64      	subs	r4, r4, r5
 8001ac4:	10a4      	asrs	r4, r4, #2
 8001ac6:	42a6      	cmp	r6, r4
 8001ac8:	d105      	bne.n	8001ad6 <__libc_init_array+0x2e>
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
 8001acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad0:	4798      	blx	r3
 8001ad2:	3601      	adds	r6, #1
 8001ad4:	e7ee      	b.n	8001ab4 <__libc_init_array+0xc>
 8001ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ada:	4798      	blx	r3
 8001adc:	3601      	adds	r6, #1
 8001ade:	e7f2      	b.n	8001ac6 <__libc_init_array+0x1e>
 8001ae0:	08001b2c 	.word	0x08001b2c
 8001ae4:	08001b2c 	.word	0x08001b2c
 8001ae8:	08001b2c 	.word	0x08001b2c
 8001aec:	08001b30 	.word	0x08001b30

08001af0 <_init>:
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af2:	bf00      	nop
 8001af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001af6:	bc08      	pop	{r3}
 8001af8:	469e      	mov	lr, r3
 8001afa:	4770      	bx	lr

08001afc <_fini>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	bf00      	nop
 8001b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b02:	bc08      	pop	{r3}
 8001b04:	469e      	mov	lr, r3
 8001b06:	4770      	bx	lr
